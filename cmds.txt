1. Configuring:
git config --global user.name "<username separated in hyphens/underscores>"
git config --global user.email "hussain.h@somaiya.edu"

to check:  - config file -> 
git config --list


2. Initialization:
cmd to initialize repo as a git repo -> to enable it to track the changes:
git init

git status - provides the overview of the repo


3. ADD & COMMIT:
git add -> adds files/folders from working directory to staging area 
git add <filename>
git add . // adds entire current directory
untracked -> changes to be committed

how to revert back? -> like if you want to go back (accidently added a file)
git reset <filename>

git commit -> converts the staging area ready files -> proper commits
syntax: git commit -m "IMP & Meaningful Message"


4. Logs And Status
git log -> returns the log file for each commit containing:
- SHA - 1 HASH 
- Author, Date, Commit Message etc.


5. Rollback
how to rollback to the previous version?
- git checkout (hash):
syntax: git checkout <copy the hash of the commit version>
//get the hash from "git log" cmd


6.Branching:
git branch -> checks how many existing branches are there

Creating Branches:
git branch <name of the branch> 

How to Switch to that branch/ use that branch:
git checkout <name of the branch>
- Author, Date, etc.

How to merge post bug fixes?
step 1: Switch to main / master branch
step 2: Then type "git merge <branch_name to be merged with main>"


 7. .gitignore file - https://www.freecodecamp.org/news/gitignore-what-is-it-and-how-to-add-to-repo/
 Lets say we have some imp files - passwords / smthng
 - So, we create a new file ".gitignore"
 - we simply just type the file name in the file, and git wont track that file - SIMPLE!!
 - We can also ignore the .gitignore file by adding its name there 
 - We can add direectories as : "dir_name/"


8. Pushing & Pulling & cloning:
syntax: git push  
syntax: git pull
syntax: git clone <githb url>


FORKS : CREATE A COPY OF ANY PUBLIC REPO , THEN WE CLONE IT 

ISSUES: CREATE ISSUES / feature for modification, first to contribute to opensource
PR: PULL REQUEST- MERGING FILES FROM YOUR GITHUB (GIT -> GITHUB) (LOCAL -> CLOUD) & THEN RAISE A PR 
